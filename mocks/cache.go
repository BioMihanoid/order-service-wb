// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "order-service-wb/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// Get provides a mock function with given fields: id
func (_m *Cache) Get(id string) (models.Order, bool) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 models.Order
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (models.Order, bool)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.Order); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Set provides a mock function with given fields: id, order
func (_m *Cache) Set(id string, order models.Order) {
	_m.Called(id, order)
}

// NewCache creates a new instance of Cache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCache(t interface {
	mock.TestingT
	Cleanup(func())
}) *Cache {
	mock := &Cache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
